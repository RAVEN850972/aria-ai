# aria/processors/__init__.py
"""
ARIA Processors Module

–ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–æ–¥–∞–ª—å–Ω–æ—Å—Ç–µ–π:
- Text: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞, —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è, n-–≥—Ä–∞–º–º—ã, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
- Image: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –ø–∞—Ç—á–∏, –ø—Ä–∏–∑–Ω–∞–∫–∏
- Audio: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ, —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
- Video: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ, –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
- Multimodal: –∫—Ä–æ—Å—Å-–º–æ–¥–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Å–ª–∏—è–Ω–∏–µ
"""

from typing import Dict, Any, List
import logging

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –ø–æ–¥–º–æ–¥—É–ª–µ–π –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ –º–µ—Ä–µ –∏—Ö —Å–æ–∑–¥–∞–Ω–∏—è
from .text import *

logger = logging.getLogger(__name__)

# –í–µ—Ä—Å–∏—è –º–æ–¥—É–ª—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤
__version__ = "0.1.0"

# –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤
PROCESSOR_METADATA = {
    "text": {
        "description": "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
        "components": [
            "AdvancedTextTokenizer",
            "NGramExtractor", 
            "BeamSearchGenerator",
            "TextFusionStrategy",
            "TextModelManager"
        ],
        "modalities": ["text"],
        "dependencies": []
    }
    # –î—Ä—É–≥–∏–µ –º–æ–¥–∞–ª—å–Ω–æ—Å—Ç–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–∑–∂–µ
}

def get_available_processors() -> Dict[str, Any]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞—Ö
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤
    """
    return PROCESSOR_METADATA.copy()

def get_processors_by_modality(modality: str) -> List[str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –º–æ–¥–∞–ª—å–Ω–æ—Å—Ç–∏
    
    Args:
        modality: –¢–∏–ø –º–æ–¥–∞–ª—å–Ω–æ—Å—Ç–∏
        
    Returns:
        –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤
    """
    result = []
    for processor_type, metadata in PROCESSOR_METADATA.items():
        if modality in metadata["modalities"]:
            result.extend(metadata["components"])
    return result

def register_all_processors():
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Ä–µ–µ—Å—Ç—Ä–µ
    """
    from ..core import GLOBAL_REGISTRY
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –ª–∏ —É–∂–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    if len(GLOBAL_REGISTRY.list_types()) > 0:
        logger.debug("–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    
    logger.info("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤...")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã
    try:
        from .text import register_text_processors
        register_text_processors()
        logger.info("‚úÖ –¢–µ–∫—Å—Ç–æ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    except ImportError as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã: {e}")
    
    total_registered = len(GLOBAL_REGISTRY.list_types())
    logger.info(f"üéâ –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤: {total_registered}")

def validate_processor_dependencies() -> Dict[str, List[str]]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –Ω–∞—Ä—É—à–µ–Ω–∏—è–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    """
    from ..core import GLOBAL_REGISTRY
    return GLOBAL_REGISTRY.validate_all_dependencies()

__all__ = [
    # –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    "get_available_processors",
    "get_processors_by_modality", 
    "register_all_processors",
    "validate_processor_dependencies",
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    "PROCESSOR_METADATA",
    "__version__",
    
    # –≠–∫—Å–ø–æ—Ä—Ç—ã –∏–∑ –ø–æ–¥–º–æ–¥—É–ª–µ–π (–±—É–¥—É—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω—ã)
]

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
logger.debug("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è processors")