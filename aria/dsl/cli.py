# aria/dsl/cli.py
"""CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞–º–∏ ARIA"""

from typing import List, Optional

from ..core import ProcessingGraph, ComponentRegistry
from .parser import PipelineDSL
from .templates import TemplateManager


class PipelineCLI:
    """CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–∞–π–ø–ª–∞–π–Ω–∞–º–∏"""
    
    def __init__(self, registry: ComponentRegistry):
        self.registry = registry
        self.dsl = PipelineDSL(registry)
        self.template_manager = TemplateManager()
        self.active_graph: Optional[ProcessingGraph] = None
    
    def execute_command(self, command: str, args: List[str]) -> str:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç CLI –∫–æ–º–∞–Ω–¥—É"""
        try:
            if command == "create":
                return self._create_pipeline(args)
            elif command == "load":
                return self._load_pipeline(args)
            elif command == "run":
                return self._run_pipeline(args)
            elif command == "info":
                return self._show_info()
            elif command == "templates":
                return self._list_templates()
            elif command == "components":
                return self._list_components()
            else:
                return f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}"
        except Exception as e:
            return f"–û—à–∏–±–∫–∞: {e}"
    
    def _create_pipeline(self, args: List[str]) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞–π–ø–ª–∞–π–Ω –∏–∑ —à–∞–±–ª–æ–Ω–∞"""
        if not args:
            return "–£–∫–∞–∂–∏—Ç–µ –∏–º—è —à–∞–±–ª–æ–Ω–∞"
        
        template_name = args[0]
        
        try:
            self.active_graph = self.template_manager.create_from_template(
                template_name, self.registry
            )
            return f"‚úÖ –ü–∞–π–ø–ª–∞–π–Ω —Å–æ–∑–¥–∞–Ω –∏–∑ —à–∞–±–ª–æ–Ω–∞ '{template_name}'"
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {e}"
    
    def _load_pipeline(self, args: List[str]) -> str:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–∞–π–ø–ª–∞–π–Ω –∏–∑ —Ñ–∞–π–ª–∞"""
        if not args:
            return "–£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É"
        
        try:
            self.active_graph = self.dsl.parse_file(args[0])
            return f"‚úÖ –ü–∞–π–ø–ª–∞–π–Ω –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ '{args[0]}'"
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}"
    
    def _run_pipeline(self, args: List[str]) -> str:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω"""
        if not self.active_graph:
            return "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞"
        
        if not args:
            return "‚ùå –£–∫–∞–∂–∏—Ç–µ –≤—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç"
        
        text = " ".join(args)
        
        try:
            results = self.active_graph.execute({"text_input": text})
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            output = ["üîÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:"]
            for node_name, result in results.items():
                status = "‚úÖ" if result["status"] == "success" else "‚ùå"
                time_info = f"({result.get('processing_time', 0):.3f}s)"
                output.append(f"  {status} {node_name}: {time_info}")
            
            return "\n".join(output)
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}"
    
    def _show_info(self) -> str:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–π–ø–ª–∞–π–Ω–µ"""
        if not self.active_graph:
            return "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞"
        
        info = self.active_graph.get_graph_info()
        
        output = [
            f"üìä –ü–∞–π–ø–ª–∞–π–Ω: {info['name']}",
            f"   –£–∑–ª–æ–≤: {info['nodes_count']}",
            f"   –°–≤—è–∑–µ–π: {info['edges_count']}",
            f"   –ü–æ—Ä—è–¥–æ–∫: {' -> '.join(info['execution_order'])}",
            "",
            "üß© –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:"
        ]
        
        for node_name, node_info in info['nodes'].items():
            output.append(f"  ‚Ä¢ {node_name}: {node_info['component_type']}")
        
        return "\n".join(output)
    
    def _list_templates(self) -> str:
        """–°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤"""
        templates = self.template_manager.list_templates()
        output = ["üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã:"]
        for template in templates:
            output.append(f"  ‚Ä¢ {template}")
        return "\n".join(output)
    
    def _list_components(self) -> str:
        """–°–ø–∏—Å–æ–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        types = self.registry.list_types()
        instances = self.registry.list_instances()
        
        output = [
            "üß© –¢–∏–ø—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:",
            *[f"  ‚Ä¢ {t}" for t in types],
            "",
            "‚öôÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã:",
            *[f"  ‚Ä¢ {i}" for i in instances]
        ]
        
        return "\n".join(output)