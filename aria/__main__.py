# aria/__main__.py
"""Entry point –¥–ª—è ARIA CLI"""

import sys
import argparse

from .core import GLOBAL_REGISTRY
from .processors import register_all_processors
from .dsl import PipelineCLI, FluentPipelineBuilder, create_text_pipeline


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI"""
    parser = argparse.ArgumentParser(description='ARIA - Adaptive Reconfigurable Intelligence Architecture')
    subparsers = parser.add_subparsers(dest='command', help='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')
    
    # –ö–æ–º–∞–Ω–¥–∞ create
    create_parser = subparsers.add_parser('create', help='–°–æ–∑–¥–∞—Ç—å –ø–∞–π–ø–ª–∞–π–Ω –∏–∑ —à–∞–±–ª–æ–Ω–∞')
    create_parser.add_argument('template', help='–ò–º—è —à–∞–±–ª–æ–Ω–∞')
    
    # –ö–æ–º–∞–Ω–¥–∞ run
    run_parser = subparsers.add_parser('run', help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—Å—Ç–∞')
    run_parser.add_argument('text', nargs='+', help='–¢–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏')
    
    # –ö–æ–º–∞–Ω–¥–∞ load
    load_parser = subparsers.add_parser('load', help='–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–∞–π–ø–ª–∞–π–Ω –∏–∑ —Ñ–∞–π–ª–∞')
    load_parser.add_argument('file', help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
    
    # –ö–æ–º–∞–Ω–¥—ã –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    subparsers.add_parser('info', help='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–π–ø–ª–∞–π–Ω–µ')
    subparsers.add_parser('templates', help='–°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤')
    subparsers.add_parser('components', help='–°–ø–∏—Å–æ–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤')
    subparsers.add_parser('interactive', help='–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º')
    subparsers.add_parser('demo', help='–î–µ–º–æ —Ä–µ–∂–∏–º')
    
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
    register_all_processors()
    cli = PipelineCLI(GLOBAL_REGISTRY)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã
    if args.command == 'create':
        result = cli.execute_command('create', [args.template])
        print(result)
    
    elif args.command == 'run':
        result = cli.execute_command('run', args.text)
        print(result)
    
    elif args.command == 'load':
        result = cli.execute_command('load', [args.file])
        print(result)
    
    elif args.command in ['info', 'templates', 'components']:
        result = cli.execute_command(args.command, [])
        print(result)
    
    elif args.command == 'interactive':
        interactive_mode(cli)
    
    elif args.command == 'demo':
        demo_mode()


def interactive_mode(cli: PipelineCLI):
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º"""
    print("üöÄ ARIA Interactive Mode")
    print("–ö–æ–º–∞–Ω–¥—ã: create, run, load, info, templates, components, exit")
    print("-" * 50)
    
    while True:
        try:
            user_input = input("aria> ").strip()
            
            if not user_input:
                continue
            
            if user_input.lower() in ('exit', 'quit'):
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            
            # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É
            parts = user_input.split()
            command = parts[0]
            args = parts[1:]
            
            result = cli.execute_command(command, args)
            print(result)
            
        except KeyboardInterrupt:
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


def demo_mode():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º"""
    print("üéØ ARIA Demo Mode")
    print("=" * 40)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    register_all_processors()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–∞–π–ø–ª–∞–π–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –≤—Ö–æ–¥–∞–º–∏
    print("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–π–ø–ª–∞–π–Ω–∞...")
    pipeline = (FluentPipelineBuilder(GLOBAL_REGISTRY, "demo_pipeline")
                .tokenizer("demo_tokenizer", preserve_punctuation=True)
                .ngram_extractor("demo_ngrams", ngram={'min_n': 2, 'max_n': 4})
                .generator("demo_generator", generation={'beam_size': 3})
                .build())
    
    print("‚úÖ –ü–∞–π–ø–ª–∞–π–Ω —Å–æ–∑–¥–∞–Ω!")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã
    test_phrases = [
        "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ",
        "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", 
        "–æ–±—Ä–∞–±–æ—Ç–∫–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞",
        "–Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏"
    ]
    
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:")
    print("-" * 30)
    
    from .core import ModalityData, ModalityType
    
    for phrase in test_phrases:
        print(f"\nüìù –í—Ö–æ–¥: '{phrase}'")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—Ö–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–∞—Ç
            input_data = {
                "input": ModalityData(
                    data=phrase,
                    modality=ModalityType.TEXT
                )
            }
            
            results = pipeline.execute(input_data)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            success_count = 0
            for node_name, result in results.items():
                if result["status"] == "success":
                    print(f"   ‚úÖ {node_name}: OK")
                    success_count += 1
                else:
                    print(f"   ‚ùå {node_name}: {result.get('error', 'Unknown error')}")
            
            print(f"   üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{len(results)} —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print(f"\nüéâ –î–µ–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


def quick_start():
    """–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    register_all_processors()
    
    # –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    pipeline = create_text_pipeline(GLOBAL_REGISTRY)
    result = pipeline.execute({"text_input": "–ø—Ä–∏–º–µ—Ä —Ç–µ–∫—Å—Ç–∞"})
    
    return pipeline, result


if __name__ == '__main__':
    main()